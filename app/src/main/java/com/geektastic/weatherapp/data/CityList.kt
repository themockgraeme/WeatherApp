package com.geektastic.weatherapp.data

/**
 * Wrapper around an [Array] of [City] objects, providing basic search functionality.
 */
data class CityList(private val cities: Array<City>?) {

    /**
     * Finds the nearest city in the list to the supplied coordinates.
     *
     * @param coordinates A [Coordinates] object representing a location's latitude and longitude
     * @return The nearest [City] to that point
     */
    fun getNearestCity(coordinates: Coordinates) : City? {
        var nearestCity: City? = null
        var distanceToNearest = Double.MAX_VALUE

        this.cities?.let {
            for (city in it) {
                val distanceToCity = coordinates.distance(city.coordinates)

                if (nearestCity == null || distanceToNearest > distanceToCity) {
                    nearestCity = city
                    distanceToNearest = distanceToCity
                }
            }
        }

        return nearestCity
    }

    /**
     * Autogenerated hash code method.
     *
     * @return The hashcode value
     */
    override fun hashCode(): Int {
        return cities?.contentHashCode() ?: 0
    }

    /**
     * Auto-generated equals method.
     *
     * @param other The object being compared
     * @return True if the objects are equal, false otherwise
     */
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CityList

        if (cities != null) {
            if (other.cities == null) return false
            if (!cities.contentEquals(other.cities)) return false
        } else if (other.cities != null) return false

        return true
    }
}
